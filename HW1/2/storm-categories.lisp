;;;; storm-categories ;;;;
(defun sc-get-category-name (speed)
    (cond ((> speed 156) 'Hurricane-Cat-5)
          ((> speed 131) 'Hurricane-Cat-4)
          ((> speed 111) 'Hurricane-Cat-3)
          ((> speed 96) 'Hurricane-Cat-2)
          ((> speed 74) 'Hurricane-Cat-1)
          ((> speed 39) 'Tropical-Storm)
          (t nil)
    )
)
; translate (bonnie 65) to (BONNIE TROPICAL-STORM)
(defun sc-get-one-spot (list)
    (list (car list) (sc-get-category-name (cadr list)))
)
(defun storm-categories (list)
    (mapcar #'sc-get-one-spot list)
)
;;;; storm-categories ;;;;

;;;; storm-distribution ;;;;
(setq Tropical-Storm 0)
(setq Hurricane-Cat-1 0)
(setq Hurricane-Cat-2 0)
(setq Hurricane-Cat-3 0)
(setq Hurricane-Cat-4 0)
(setq Hurricane-Cat-5 0)

(defun sd-judge-distribution (speed)
    (cond ((> speed 156) (setq Hurricane-Cat-5 (1+ Hurricane-Cat-5)))
        ((> speed 131) (setq Hurricane-Cat-4 (1+ Hurricane-Cat-4)))
        ((> speed 111) (setq Hurricane-Cat-3 (1+ Hurricane-Cat-3)))
        ((> speed 96) (setq Hurricane-Cat-2 (1+ Hurricane-Cat-2)))
        ((> speed 74) (setq Hurricane-Cat-1 (1+ Hurricane-Cat-1)))
        ((> speed 39) (setq Tropical-Storm (1+ Tropical-Storm)))
        (t nil)
    )  
)
(defun sd-generate-distribution (list)
    (sd-judge-distribution (cadr list))
)

(defconstant *storm-level* '(Tropical-Storm Hurricane-Cat-1 Hurricane-Cat-2 Hurricane-Cat-3 Hurricane-Cat-4 Hurricane-Cat-5))

(defun storm-distribution (list)
    (mapcar #'sd-generate-distribution list)
    (setq storm-value (mapcar #'eval *storm-level*))
    (mapcar #'list *storm-level* storm-value)
)
;;;; storm-distribution ;;;;
